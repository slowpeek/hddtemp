#!/usr/bin/env bash

# MIT license (c) 2022-2024 https://github.com/slowpeek
# Homepage: https://github.com/slowpeek/hddtemp

set -eu
shopt -s nullglob

# A very basic replacement for hddtemp tool removed from the official
# repositories of Ubuntu (since 22.04) and Debian (since 12). It requires
# smartctl (smartmontools package).

SCRIPT_VERSION=0.2.2+git
SCRIPT_SELF=${BASH_SOURCE[0]##*/}

t_red=$'\e[31m'
t_yellow=$'\e[33m'
t_reset=$'\e(B\e[m'
verb=2

_log() {
    (( verb < $1 )) && return
    echo "$2" "${@:3}" >&2
}

log_warn() { _log 2 "${t_yellow}warning:${t_reset}" "$@"; }
log_err() { _log 1 "${t_red}error:${t_reset}" "$@"; }

bye() {
    log_err "$@"
    exit 1
}

version() {
    echo "${SCRIPT_SELF} ${SCRIPT_VERSION}"
    exit
}

usage() {
    cat <<EOF
USAGE --

${SCRIPT_SELF}
    Show temps for all sd and nvme disks

${SCRIPT_SELF} /dev/sda ..
    Show temps for selected disks

Options:
--classic                  Replicate output format of the original hddtemp
-h, --help                 Show usage
-q                         Suppress warnings
-u, --units=C|F            Use Celsius (default) or Fahrenheit scale
-V, --version              Show version

Homepage https://github.com/slowpeek/hddtemp
EOF

    exit
}

temp_ata() {
    if [[ $1 == *'Temperature_Celsius'* ]]; then
        read -r _ _ _ _ _ _ _ _ _ temp <<< "$1"
    elif [[ $1 == *'Airflow_Temperature_Cel'* ]]; then
        read -r _ _ _ _ _ _ _ _ _ temp <<< "$1"
    fi
}

temp_nvme() {
    if [[ $1 == 'Temperature:'* ]]; then
        read -r _ temp <<< "$1"
    fi
}

temp_scsi() {
    if [[ $1 == 'Current Drive Temperature:'* ]]; then
        read -r _ _ _ temp <<< "$1"
    fi
}

fah_temp() {
    local r

    (( temp = temp*18 + 320,
       r = temp % 10,
       temp /= 10,
       r < 5 || temp++ ))
}

main() {
    local opts

    # jetopt .classic hhelp q uunits: Vversion
    opts=$(getopt -o hqu:V -l classic,help,units:,version -- "$@") || exit
    eval set -- "$opts"

    local units=C classic=n scale=

    while (( $# )); do
        case $1 in
            -h|--help)
                usage ;;
            -V|--version)
                version ;;

            --classic)
                classic=y
                shift ;;

            -u|--units)
                [[ $2 == @(C|F) ]] ||
                    bye "The only valid values for $1 are 'C' and 'F'"

                units=$2
                shift 2 ;;

            -q)
                (( --verb )) || verb=1
                shift ;;
            --)
                shift
                break ;;
        esac
    done

    if [[ $classic == y ]]; then
        # The degree symbol in the current locale.
        scale=$(iconv -f utf-8 <<< $'\xc2\xb0')

        # °C / °F
        scale+=$units
    fi

    type -P smartctl &>/dev/null || bye 'smartctl is not available'
    (( EUID )) && bye 'smartctl requires root permissions, run with sudo'

    # Check smartctl version for NVMe support.
    local ver
    read -r _ ver _ < <(smartctl -V)

    [[ $ver == @([0-5].*|6.[0-4]*) ]] &&
        log_warn "startctl supports NVMe devices since v6.5 (yours is v${ver})"

    # If no args supplied, assume all sd and nvme disks.
    (( $# )) || set -- /dev/sd? /dev/sd?[a-z] /dev/nvme?n?

    local items=() l_disk=0 l_name=1
    local disk name temp lines line i n parser
    for disk; do
        [[ $disk == /dev/* ]] || continue

        # Collect disk field's width
        (( ${#disk} > l_disk )) && l_disk=${#disk}

        readarray -t lines < <(smartctl -i -A "$disk" 2>&1)

        # There are three printers in smartctl overall: ataprint, nvmeprint,
        # scsiprint. Leverage the output formats peculiarities.

        name=
        for (( i=0, n=${#lines[@]}; i<n; i++ )); do
            line=${lines[i]}

            case $line in
                'Device Model:'*)
                    read -r _ _ name <<< "$line"
                    parser=ata
                    break ;;
                'Model Number:'*)
                    read -r _ _ name <<< "$line"
                    parser=nvme
                    break ;;
                'Product:'*)
                    read -r _ name <<< "$line"
                    parser=scsi
                    break ;;
            esac
        done

        temp=
        if [[ -n $name ]]; then
            # Collect name field's width
            (( ${#name} > l_name )) && l_name=${#name}

            for (( i++; i<n; i++ )); do
                temp_"$parser" "${lines[i]}"

                if [[ -n $temp ]]; then
                    # Only keep the first number.
                    # Sample values: '31 (Min/Max 0/59)', '29 C'
                    temp=${temp%%[^0-9]*}

                    # Convert to Fahrenheit if asked.
                    [[ $units == C ]] || fah_temp

                    break
                fi
            done
        fi

        items+=("${disk}:" "${name:-?}" "${temp:-?}" "${temp:+$scale}")
    done

    if [[ $classic = n ]]; then
        printf "%-$((l_disk+1))s  %-${l_name}s  %s%s\n" "${items[@]}"
    else
        printf "%s %s: %s%s\n" "${items[@]}"
    fi
}

[[ ! ${BASH_SOURCE[0]} == "$0" ]] || main "$@"
