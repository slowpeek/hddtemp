#!/usr/bin/env bash

# MIT license (c) 2022-2023 https://github.com/slowpeek
# Homepage: https://github.com/slowpeek/hddtemp

set -eu
shopt -s nullglob

# A very basic replacement for hddtemp tool removed from the official
# repositories of Ubuntu (since 22.04) and Debian (since 12). It requires
# smartctl (smartmontools package).

SCRIPT_VERSION=0.2+git
SCRIPT_SELF=${BASH_SOURCE[0]##*/}

t_red=$'\e[31m'
t_yellow=$'\e[33m'
t_reset=$'\e(B\e[m'
verb=2

_log() {
    (( verb < $1 )) && return
    echo "$2" "${@:3}" >&2
}

log_warn() { _log 2 "${t_yellow}warning:${t_reset}" "$@"; }
log_err() { _log 1 "${t_red}error:${t_reset}" "$@"; }

bye() {
    log_err "$@"
    exit 1
}

version() {
    echo "${SCRIPT_SELF} ${SCRIPT_VERSION}"
    exit
}

usage() {
    cat <<EOF
USAGE --

${SCRIPT_SELF}
    Show temps for all sd and nvme disks

${SCRIPT_SELF} /dev/sda ..
    Show temps for selected disks

Options:
-h, --help                 Show usage
-q                         Suppress warnings
-u, --units=C|F            Use Celsius (default) or Fahrenheit scale
-V, --version              Show version

Homepage https://github.com/slowpeek/hddtemp
EOF

    exit
}

temp_ata() {
    local line

    for line; do
        if [[ $line == *'Temperature_Celsius'* ]]; then
            read -r _ _ _ _ _ _ _ _ _ temp <<< "$line"
            break
        fi
    done
}

temp_nvme() {
    local line

    for line; do
        if [[ $line == 'Temperature:'* ]]; then
            read -r _ temp <<< "$line"
            break
        fi
    done
}

temp_scsi() {
    local line

    for line; do
        if [[ $line == 'Current Drive Temperature:'* ]]; then
            read -r _ _ _ temp <<< "$line"
            break
        fi
    done
}

fah_temp() {
    local r

    (( temp = temp*18 + 320,
       r = temp % 10,
       temp /= 10,
       r < 5 || temp++ ))
}

main() {
    local opts

    # jetopt hhelp q uunits: Vversion
    opts=$(getopt -o hqu:V -l help,units:,version -- "$@") || exit
    eval set -- "$opts"

    local units=C

    while (( $# )); do
        case $1 in
            -h|--help)
                usage ;;
            -V|--version)
                version ;;

            -u|--units)
                [[ $2 == @(C|F) ]] ||
                    bye "The only valid values for $1 are 'C' and 'F'"

                units=$2
                shift 2 ;;

            -q)
                (( --verb )) || verb=1
                shift ;;
            --)
                shift
                break ;;
        esac
    done

    type -P smartctl &>/dev/null || bye 'smartctl is not available'
    (( EUID )) && bye 'smartctl requires root permissions, run with sudo'

    # Check smartctl version for NVMe support.
    local ver
    read -r _ ver _ < <(smartctl -V)

    [[ $ver == @([0-5].*|6.[0-4]*) ]] &&
        log_warn "startctl supports NVMe devices since v6.5 (yours is v${ver})"

    # If no args supplied, assume all sd and nvme disks.
    (( $# )) || set -- /dev/sd? /dev/nvme?n?

    local items=() l1=0 l2=1
    local disk name temp lines line n parser
    for disk; do
        [[ $disk == /dev/* ]] || continue

        name=
        temp=

        readarray -t lines < <(smartctl -i -A "$disk" 2>&1)

        # There are three printers in smartctl overall: ataprint, nvmeprint,
        # scsiprint. Leverage the output formats peculiarities.

        n=0
        for line in "${lines[@]}"; do
            ((++n))

            case $line in
                'Device Model:'*)
                    read -r _ _ name <<< "$line"
                    parser=ata
                    break ;;
                'Model Number:'*)
                    read -r _ _ name <<< "$line"
                    parser=nvme
                    break ;;
                'Product:'*)
                    read -r _ name <<< "$line"
                    parser=scsi
                    break ;;
            esac
        done

        [[ -z $name ]] || temp_"$parser" "${lines[@]:n}"

        # Only keep the first number.
        # Sample values: '31 (Min/Max 0/59)', '29 C'
        [[ -z ${temp-} ]] || temp=${temp%%[^0-9]*}

        # Convert to Fahrenheit if asked.
        [[ $units == C ]] || fah_temp

        # Collect max width of values.
        (( ${#disk} > l1 )) && l1=${#disk}
        (( ${#name} > l2 )) && l2=${#name}

        items+=("${disk}:" "${name:-?}" "${temp:-?}")
    done

    printf "%-$((l1+1))s  %-${l2}s  %s\n" "${items[@]}"
}

[[ ! ${BASH_SOURCE[0]} == "$0" ]] || main "$@"
